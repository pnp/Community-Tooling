<?xml version="1.0" encoding="utf-8" ?>

<inspection>
  <tokens>
    <token name="ColumnSchemaUrl" value="https://developer.microsoft.com/json-schemas/sp/v2/column-formatting.schema.json"/>
    <token name="ViewSchemaUrl" value="https://developer.microsoft.com/json-schemas/sp/view-formatting.schema.json"/>
    <token name="TilesSchemaUrl" value="https://developer.microsoft.com/json-schemas/sp/v2/tile-formatting.schema.json"/>
    <token name="FormattedSchemaTemplate">
      <![CDATA[{
  "$schema": "SCHEMAURLHERE",]]>
    </token>
    <token name="ColumnSchema" value="$REPLACE(@@FormattedSchemaTemplate@@,#SCHEMAURLHERE,#@@ColumnSchemaUrl@@)"/>
    <token name="ViewSchema" value="$REPLACE(@@FormattedSchemaTemplate@@,#SCHEMAURLHERE,#@@ViewSchemaUrl@@)"/>
    <token name="TilesSchema" value="$REPLACE(@@FormattedSchemaTemplate@@,#SCHEMAURLHERE,#@@TilesSchemaUrl@@)"/>
  </tokens>

  <rules>
    <rule name="SampleContents" description="Validates the folders/files for a given sample">
      <tokens>
        <token name="whatever" value="$UPPER(@@fun@@)"/>
      </tokens>
      <conditions>
        <fileexists relativepath=""/>
      </conditions>
    </rule>

    <rule name="README_Exists" description="Verifies the README.md file exists">
      <conditions>
        <fileexists path="README.md"/>
        <fileexists path="README.md" matchcase="true" warn="true"/>
      </conditions>
    </rule>

    <rule name="AssetsFolder_Exists" description="Verifies the assets folder exists">
      <conditions>
        <folderexists path="assets"/>
        <folderexists path="assets" matchcase="true" warn="true"/>
      </conditions>
    </rule>

    <rule name="VerifySampleFiles" description="Makes sure base files exist">
      <conditions>
        <run rule="README_Exists"/>
        <run rule="Assets_Exists"/>
      </conditions>
    </rule>

    <rule name="ValidateSample" description="">
      <tokens>
        <token name="SampleKey" value="$IF($STARTSWITH(@@Each@@,#@@),#$DIRECTORYNAME(@@StartingPath@@),#@@Each@@)"/>
        <token name="FolderPath" value="$IF($STARTSWITH(@@ContainerPath@@,#@@),#@@StartingPath@@,#@@ContainerPath@@\@@Each@@)"/>
        <token name="MainJsonPath" value="@@FolderPath@@\@@SampleKey@@.json"/>
        <token name="READMEPath" value="@@FolderPath@@\README.md"/>
        <token name="AssetsPath" value="@@FolderPath@@\assets"/>
        <token name="SampleJsonPath" value="@@AssetsPath@@\sample.json"/>
        <token name="SampleType" value="$IF($CONTAINS(@@FolderPath@@,#\column-samples\),#Column,#$IF($CONTAINS(@@FolderPath@@,#\form-samples\),#Form,#View))"/>
        <token name="TelemetryTag">
          <![CDATA[<img src="https://telemetry.sharepointpnp.com/sp-dev-list-formatting/$LOWER(@@SampleType@@)-samples/@@SampleKey@@" />]]>
        </token>
      </tokens>
      <conditions>
        <fileexists path="@@MainJsonPath@@" failuremessage="Primary Sample JSON not found! (@@SampleKey@@)"/>
        <fileexists path="@@MainJsonPath@@" matchcase="true" warn="true"/>
        <fileexists path="@@READMEPath@@" failuremessage="README not found! (@@SampleKey@@)"/>
        <fileexists path="@@READMEPath@@" matchcase="true" warn="true"/>
        <folderexists path="@@AssetsPath@@" failuremessage="assets folder missing! (@@SampleKey@@)"/>
        <folderexists path="@@AssetsPath@@" matchcase="true" warn="true"/>
        <fileexists path="@@SampleJsonPath@@" failuremssage="sample.json not found! (@@SampleKey@@)"/>
        <fileexists path="@@SampleJsonPath@@" matchcase="true" warn="true"/>
        <or>
          <and>
            <fileexists path="@@AssetsPath@@\screenshot.png"/>
            <fileexists path="@@AssetsPath@@\screenshot.png" matchcase="true" warn="true"/>
          </and>
          <and>
            <fileexists path="@@AssetsPath@@\screenshot.gif"/>
            <fileexists path="@@AssetsPath@@\screenshot.gif" matchcase="true" warn="true"/>
          </and>
        </or>
        <filecontains path="@@READMEPath@@" text="@@TelemetryTag@@" matchcase="true" failuremessage="Telemetry Tag incorrect in README (@@SampleKey@@)"/>
        <or>
          <filecontains path="@@READMEPath@@" text="![screenshot of the sample](./assets/screenshot.png)" failuremessage="Screenshot not correctly referenced in README (@@SampleKey@@)"/>
          <filecontains path="@@READMEPath@@" text="![screenshot of the sample](./assets/screenshot.gif)" failuremessage="Screenshot not correctly referenced in README (@@SampleKey@@)"/>
        </or>
        <filecontains path="@@READMEPath@@" text="## Summary" failuremessage="README missing Summary section (@@SampleKey@@)"/>
        <filecontains path="@@READMEPath@@" text="## View requirements" failuremessage="README missing View requirements section (@@SampleKey@@)"/>
        <filecontains path="@@READMEPath@@" text="## Version history" failuremessage="README missing Version history section (@@SampleKey@@)"/>
      </conditions>
    </rule>

    <rule name="ValidateSamples">
      <conditions>
        <foreachfolder path="column-samples" pattern="date*">
          <run rule="ValidateSample"/>
        </foreachfolder>
      </conditions>
    </rule>

    <rule name="Screenshot" description="Verifies at least 1 screenshot exists (either gif or png)">
      <conditions>
        <or>
          <and>
            <fileexists path="assets/screenshot.png"/>
            <fileexists path="assets/screenshot.png" matchcase="true" warn="true"/>
          </and>
          <and>
            <fileexists path="assets/screenshot.gif"/>
            <fileexists path="assets/screenshot.gif" matchcase="true" warn="true"/>
          </and>
        </or>
      </conditions>
    </rule>

    <rule name="TelemetryLink">
      <tokens>
        <token name="SampleKey" value="$IF($STARTSWITH(@@Each@@,#@@),#$DIRECTORYNAME(@@StartingPath@@),#@@Each@@)"/>
        <token name="FolderPath" value="$IF($STARTSWITH(@@ContainerPath@@,#@@),#@@StartingPath@@,#@@ContainerPath@@\@@Each@@)"/>
        <token name="READMEPath" value="@@FolderPath@@\README.md"/>
        <token name="SampleType" value="$IF($CONTAINS(@@FolderPath@@,#\column-samples\),#Column,#$IF($CONTAINS(@@FolderPath@@,#\form-samples\),#Form,#View))"/>
        <token name="TelemetryTag">
          <![CDATA[<img src="https://telemetry.sharepointpnp.com/sp-dev-list-formatting/$LOWER(@@SampleType@@)-samples/@@SampleKey@@" />]]>
        </token>
      </tokens>
      <conditions>
        <filecontains path="@@READMEPath@@" text="@@TelemetryTag@@" matchcase="true" failuremessage="Telemetry Tag incorrect in README (@@SampleKey@@)"/>
        <or>
          <filecontains path="@@READMEPath@@" text="![screenshot of the sample](./assets/screenshot.png)" failuremessage="Screenshot not correctly referenced in README (@@SampleKey@@)"/>
          <filecontains path="@@READMEPath@@" text="![screenshot of the sample](./assets/screenshot.gif)" failuremessage="Screenshot not correctly referenced in README (@@SampleKey@@)"/>
        </or>
        <filecontains path="@@READMEPath@@" text="## Summary" failuremessage="README missing Summary section (@@SampleKey@@)"/>
        <filecontains path="@@READMEPath@@" text="## View requirements" failuremessage="README missing View requirements section (@@SampleKey@@)"/>
        <filecontains path="@@READMEPath@@" text="## Version history" failuremessage="README missing Version history section (@@SampleKey@@)"/>
      </conditions>
    </rule>

    <rule name="JsonValidate">
      <tokens>
        <token name="SampleKey" value="$IF($STARTSWITH(@@Each@@,#@@),#$DIRECTORYNAME(@@StartingPath@@),#@@Each@@)"/>
        <token name="FolderPath" value="$IF($STARTSWITH(@@ContainerPath@@,#@@),#@@StartingPath@@,#@@ContainerPath@@\@@Each@@)"/>
        <token name="MainJsonPath" value="@@FolderPath@@\@@SampleKey@@.json"/>
        <token name="READMEPath" value="@@FolderPath@@\README.md"/>
        <token name="AssetsPath" value="@@FolderPath@@\assets"/>
        <token name="SampleJsonPath" value="@@AssetsPath@@\sample.json"/>
        <token name="SampleType" value="$IF($CONTAINS(@@FolderPath@@,#\column-samples\),#Column,#$IF($CONTAINS(@@FolderPath@@,#\form-samples\),#Form,#View))"/>
      </tokens>
      <conditions>
        <!-- sample.json Contents Validation -->
        <jsonquery path="@@SampleJsonPath@@" query="$[0].name" value="pnp-list-formatting-@@SampleKey@@" matchcase="true" failuremessage="name mismatch in sample.json (@@SampleKey@@) - should be 'pnp-list-formatting-@@SampleKey@@'"/>
        <jsonquery path="@@SampleJsonPath@@" query="$[0].reponame" value="@@SampleKey@@" matchcase="true" failuremessage="reponame mismatch in sample.json (@@SampleKey@@) - should be `@@SampleKey@@'"/>
        <jsonquery path="@@SampleJsonPath@@" query="$[0].source" value="pnp" matchcase="true" failuremessage="source mismatch in sample.json (@@SampleKey@@) - should be 'pnp'"/>
        <jsonquery path="@@SampleJsonPath@@" query="$[0].title" comparison="count" value="1" failuremessage="title missing or blank in sample.json (@@SampleKey@@)"/>
        <jsonquery path="@@SampleJsonPath@@" query="$[0].shortDescription" comparison="count" value="1" failuremessage="shortDescription missing or blank in sample.json (@@SampleKey@@)"/>
        <jsonquery path="@@SampleJsonPath@@" query="$[0].url" value="https://github.com/pnp/sp-dev-list-formatting/tree/master/$LOWER(@@SampleType@@)-samples/@@SampleKey@@" matchcase="true" failuremessage="url mismatch in sample.json (@@SampleKey@@) - should be 'https://github.com/pnp/sp-dev-list-formatting/tree/master/$LOWER(@@SampleType@@)-samples/@@SampleKey@@'"/>
        <jsonquery path="@@SampleJsonPath@@" query="$[0].longDescription[*]" comparison="count" min="1" failuremessage="longDescription missing or blank in sample.json (@@SampleKey@@)"/>
        <jsonquery path="@@SampleJsonPath@@" query="$[0].creationDateTime" comparison="count" value="1" failuremessage="creationDateTime missing or blank in sample.json (@@SampleKey@@)"/>
        <jsonquery path="@@SampleJsonPath@@" query="$[0].updateDateTime" comparison="count" value="1" failuremessage="updateDateTime missing or blank in sample.json (@@SampleKey@@)"/>
        <jsonquery path="@@SampleJsonPath@@" query="$[0].products" comparison="count" value="1" failuremessage="products missing or blank in sample.json (@@SampleKey@@) - should include 'SharePoint' and 'Microsoft Lists'"/>
        <jsonquery path="@@SampleJsonPath@@" query="$[0].products[?(@=='SharePoint')]" comparison="count" value="1" failuremessage="products missing 'SharePoint' in sample.json (@@SampleKey@@)"/>
        <jsonquery path="@@SampleJsonPath@@" query="$[0].products[?(@=='Microsoft Lists')]" comparison="count" value="1" failuremessage="products missing 'Microsoft Lists' in sample.json (@@SampleKey@@)"/>
        <jsonquery path="@@SampleJsonPath@@" query="$[0].metadata" comparison="count" value="1" failuremessage="metadata missing in sample.json (@@SampleKey@@)"/>
        <jsonquery path="@@SampleJsonPath@@" query="$[0].metadata.[?(@.key=='LIST-SAMPLE-TYPE')]" comparison="count" value="1" matchcase="true" failuremessage="metadata LIST-SAMPLE-TYPE missing in sample.json (@@SampleKey@@) - should be '@@SampleType@@'"/>
        <jsonquery path="@@SampleJsonPath@@" query="$[0].metadata.[?(@.key=='LIST-SAMPLE-TYPE')].value" value="@@SampleType@@" matchcase="true" failuremessage="LIST-SAMPLE-TYPE mismatch in sample.json (@@SampleKey@@) - should be '@@SampleType@@'"/>
        <jsonquery path="@@SampleJsonPath@@" query="$[0].metadata.[?(@.key=='SHAREPOINT-COMPATIBILITY')]" comparison="count" value="1" matchcase="true" failuremessage="metadata SHAREPOINT-COMPATIBILITY missing in sample.json (@@SampleKey@@) - should be some combination of 'SharePoint Online' and/or 'SharePoint 2019'"/>
        <or failuremessage="metadata SHAREPOINT-COMPATIBILITY invalid in sample.json (@@SampleKey@@) - should be some combination of 'SharePoint Online' and/or 'SharePoint 2019' (separate values with a comma and a space)">
          <jsonquery path="@@SampleJsonPath@@" query="$[0].metadata.[?(@.key=='SHAREPOINT-COMPATIBILITY')].value" value="SharePoint Online" matchcase="true" failuremessage="metadata SHAREPOINT-COMPATIBILITY not equal to 'SharePoint Online'"/>
          <jsonquery path="@@SampleJsonPath@@" query="$[0].metadata.[?(@.key=='SHAREPOINT-COMPATIBILITY')].value" value="SharePoint 2019" matchcase="true" failuremessage="metadata SHAREPOINT-COMPATIBILITY not equal to 'SharePoint 2019'"/>
          <jsonquery path="@@SampleJsonPath@@" query="$[0].metadata.[?(@.key=='SHAREPOINT-COMPATIBILITY')].value" value="SharePoint Online, SharePoint 2019" matchcase="true" failuremessage="metadata SHAREPOINT-COMPATIBILITY not equal to 'SharePoint Online, SharePoint 2019'"/>
          <jsonquery path="@@SampleJsonPath@@" query="$[0].metadata.[?(@.key=='SHAREPOINT-COMPATIBILITY')].value" value="SharePoint 2019, SharePoint Online" matchcase="true" failuremessage="metadata SHAREPOINT-COMPATIBILITY not equal to 'SharePoint 2019, SharePoint Online'"/>
        </or>
        <jsonquery path="@@SampleJsonPath@@" query="$[0].thumbnails[*]" comparison="count" min="1" failuremessage="At least one thumbnail entry is required in sample.json (@@SampleKey@@)"/>
        <or failuremessage="First thumbnail entry in sample.json should be the primary screenshot (gif or png) referenced from raw.githubusercontent.com (@@SampleKey@@)">
          <!-- First thumbnail should be the primary screenshot and uses the correct reference (raw.githubusercontent.com)-->
          <jsonquery path="@@SampleJsonPath@@" query="$[0].thumbnails[0].url" value="https://raw.githubusercontent.com/pnp/List-Formatting/master/$LOWER(@@SampleType@@)-samples/@@SampleKey@@/assets/screenshot.png"/>
          <jsonquery path="@@SampleJsonPath@@" query="$[0].thumbnails[0].url" value="https://raw.githubusercontent.com/pnp/List-Formatting/master/$LOWER(@@SampleType@@)-samples/@@SampleKey@@/assets/screenshot.gif"/>
        </or>
        <jsonquery path="@@SampleJsonPath@@" query="$[0].authors[*]" comparison="count" min="1" failuremessage="At least one author entry is required in sample.json (@@SampleKey@@)"/>
        <jsonquery path="@@SampleJsonPath@@" query="$[0].references" comparison="count" value="1" failuremessage="references missing in sample.json (@@SampleKey@@)"/>
      </conditions>
    </rule>

    <rule name="SchemaValidate">
      <tokens>
        <token name="SampleKey" value="$IF($STARTSWITH(@@Each@@,#@@),#$DIRECTORYNAME(@@StartingPath@@),#@@Each@@)"/>
        <token name="FolderPath" value="$IF($STARTSWITH(@@ContainerPath@@,#@@),#@@StartingPath@@,#@@ContainerPath@@\@@Each@@)"/>
        <token name="SampleType" value="$IF($CONTAINS(@@FolderPath@@,#\column-samples\),#Column,#$IF($CONTAINS(@@FolderPath@@,#\form-samples\),#Form,#View))"/>
        <token name="MainJsonPath" value="@@FolderPath@@\@@SampleKey@@.json"/>
      </tokens>
      <conditions>
        <only when="$EQUALS(@@SampleType@@,#Column)">
          <filecontains path="@@MainJsonPath@@" text="@@ColumnSchema@@"/>
        </only>
        <only when="$EQUALS(@@SampleType@@,#View)">
          <or>
            <filecontains path="@@MainJsonPath@@" text="@@ViewSchema@@"/>
            <filecontains path="@@MainJsonPath@@" text="@@TilesSchema@@"/>
          </or>
        </only>
      </conditions>
    </rule>

    <rule name="NoDebugMode">
      <tokens>
        <token name="SampleKey" value="$IF($STARTSWITH(@@Each@@,#@@),#$DIRECTORYNAME(@@StartingPath@@),#@@Each@@)"/>
        <token name="FolderPath" value="$IF($STARTSWITH(@@ContainerPath@@,#@@),#@@StartingPath@@,#@@ContainerPath@@\@@Each@@)"/>
        <token name="MainJsonPath" value="@@FolderPath@@\@@SampleKey@@.json"/>
        <token name="DebugMode1">
          <![CDATA["debugMode": true]]>
        </token>
        <token name="DebugMode2">
          <![CDATA["debugMode": "true"]]>
        </token>
        <token name="DebugModeOff1">
          <![CDATA["debugMode": false]]>
        </token>
        <token name="DebugModeOff2">
          <![CDATA["debugMode": "false"]]>
        </token>
      </tokens>
      <conditions>
        <and>
          <filecontains path="@@MainJsonPath@@" text="@@DebugMode1@@" not="true" failuremessage="DebugMode found (enabled)"/>
          <filecontains path="@@MainJsonPath@@" text="@@DebugMode2@@" not="true" failuremessage="DebugMode found (enabled)"/>
        </and>
        <and>
          <filecontains path="@@MainJsonPath@@" text="@@DebugModeOff1@@" not="true" warn="true" failuremessage="DebugMode found (not enabled)"/>
          <filecontains path="@@MainJsonPath@@" text="@@DebugModeOff2@@" not="true" warn="true" failuremessage="DebugMode found (not enabled)"/>
        </and>
      </conditions>
    </rule>

    <rule name="Subsamples">
      <tokens>
        <token name="SampleKey" value="$IF($STARTSWITH(@@Each@@,#@@),#$DIRECTORYNAME(@@StartingPath@@),#@@Each@@)"/>
        <token name="FolderPath" value="$IF($STARTSWITH(@@ContainerPath@@,#@@),#@@StartingPath@@,#@@ContainerPath@@\@@Each@@)"/>
        <token name="SampleType" value="$IF($CONTAINS(@@FolderPath@@,#\column-samples\),#Column,#$IF($CONTAINS(@@FolderPath@@,#\form-samples\),#Form,#View))"/>
        <token name="DebugMode1">
          <![CDATA["debugMode": true]]>
        </token>
        <token name="DebugMode2">
          <![CDATA["debugMode": "true"]]>
        </token>
        <token name="DebugModeOff1">
          <![CDATA["debugMode": false]]>
        </token>
        <token name="DebugModeOff2">
          <![CDATA["debugMode": "false"]]>
        </token>
      </tokens>
      <conditions>
        <foreachfile path="@@FolderPath@@" pattern="*.json">
          <only when="$EQUALS(@@SampleType@@,#Column)">
            <filecontains path="@@Each@@" text="@@ColumnSchema@@" failuremessage="Column Formatting $schema declaration missing/invalid or formatting is off (2 spaces)"/>
          </only>
          <only when="$EQUALS(@@SampleType@@,#View)">
            <or failuremessage="View Formatting $schema declaration missing/invalid or formatting is off (2 spaces)">
              <filecontains path="@@Each@@" text="@@ViewSchema@@" failuremessage="View Formatting $schema not present/valid"/>
              <filecontains path="@@Each@@" text="@@TilesSchema@@" failuremessage="Tiles (View) Formatting $schema not present/valid"/>
            </or>
          </only>

          <!-- debugMode validation (should NOT be true, and generally best to leave out) -->
          <filecontains path="@@Each@@" text="@@DebugMode1@@" not="true" failuremessage="DebugMode enabled (@@Each@@)"/>
          <filecontains path="@@Each@@" text="@@DebugMode2@@" not="true" failuremessage="DebugMode enabled (@@Each@@)"/>
          <filecontains path="@@Each@@" text="@@DebugModeOff1@@" not="true" warn="true" failuremessage="DebugMode found (disabled) (@@Each@@)"/>
          <filecontains path="@@Each@@" text="@@DebugModeOff2@@" not="true" warn="true" failuremessage="DebugMode found (disabled) (@@Each@@)"/>
        </foreachfile>
      </conditions>
    </rule>
    
  </rules>
</inspection>